// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package dbgen

import (
	"context"
	"database/sql"
)

const createPet = `-- name: CreatePet :execresult
INSERT INTO pets (
  name, status
) VALUES (
  ?, ?
)
`

type CreatePetParams struct {
	Name   string
	Status PetsStatus
}

func (q *Queries) CreatePet(ctx context.Context, arg CreatePetParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPet, arg.Name, arg.Status)
}

const deletePet = `-- name: DeletePet :exec
DELETE FROM pets
WHERE id = ?
`

func (q *Queries) DeletePet(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePet, id)
	return err
}

const getPetByID = `-- name: GetPetByID :one
SELECT id, name, status FROM pets
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPetByID(ctx context.Context, id int64) (Pet, error) {
	row := q.db.QueryRowContext(ctx, getPetByID, id)
	var i Pet
	err := row.Scan(&i.ID, &i.Name, &i.Status)
	return i, err
}

const listPets = `-- name: ListPets :many
SELECT id, name, status FROM pets
ORDER BY id
`

func (q *Queries) ListPets(ctx context.Context) ([]Pet, error) {
	rows, err := q.db.QueryContext(ctx, listPets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pet
	for rows.Next() {
		var i Pet
		if err := rows.Scan(&i.ID, &i.Name, &i.Status); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePet = `-- name: UpdatePet :exec
UPDATE pets
set name = ?, status = ?
WHERE id = ?
`

type UpdatePetParams struct {
	Name   string
	Status PetsStatus
	ID     int64
}

func (q *Queries) UpdatePet(ctx context.Context, arg UpdatePetParams) error {
	_, err := q.db.ExecContext(ctx, updatePet, arg.Name, arg.Status, arg.ID)
	return err
}
